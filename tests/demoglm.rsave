## simulations to demo pleiotropy.glm

## needed for pleiotropy.glm.fit (for ordinal regression). Should this be
## moved to pleitropy.glm.fit?

#library(rms)
devel=FALSE
if(devel) {
  source("/people/biostat4/schaid/gplus/MultivarAssoc/Pleiotropy/MultivarGLM/simTraits.R")

  ## should functions be called "pleio." to agree with pleio package?
  
  source("../R/pleio.glm.fit.R")
  source("../R/pleio.glm.test.R")
  source("../R/pleio.glm.sequential.R")
  set.seed(10000)
  n.subjs <- 500
  maf <- .2
  geno <- rbinom(n.subjs, 2, maf)
  
  y.sim <- sim.mix(n.gaus=1, n.binom=1, n.ordinal=1, prob.binom = .5,
                   cumprob.levels = cumsum(rep(1,3)/3), n.subjs=n.subjs,  commonRho=.5)
  
  glm.family <- y.sim$trait.type
  y <- y.sim$y
  colnames(y) <- c("y.gaus","y.bin", "y.ord")
  
  x <- matrix(rnorm(5*n.subjs), nrow=n.subjs)
  colnames(x) <- c("var1","var2","var3","var4","var5")

  save(list=c("y", "x","glm.family", "geno"), file="../data/pleio.sim.RData")
}
require(pleio)
data("pleio.sim")

## test without covars
obj <- pleio.glm.fit(y, geno, glm.family)
stat <- pleio.glm.test(obj, count.nonzero.coef = 0)
stat$stat
stat$pval
pleio.glm.sequential(obj, pval.threshold=.5)

## test with covars

## save these as .RData objects for updated package

## length of index.cov must be the number of traits,
## no. cols of y

#index.cov  <- vector(mode="list", length=3)
index.cov <- list()
## cols 1 and 2 are covariates for trait 1, etc.
index.cov[[1]] <- c(1:2)
index.cov[[2]] <- c(2:4)
index.cov[[3]] <- c(4,5)

obj <- pleio.glm.fit(y, geno, glm.family, x.all=x, x.index.list=index.cov)
stat <- pleio.glm.test(obj, count.nonzero.coef = 0)
stat$stat
stat$pval

plseq <- pleio.glm.sequential(obj, pval.threshold=.6)
print(plseq)

## test with other numbers of covariates
## if no covariates for one of the traits, breaks
index.cov[[1]] <- 1
index.cov[[2]] <- c(0,0)
## gets an error!!
obj <- pleio.glm.fit(y, g, glm.family, x.all=x, x.index.list=index.cov)
stat <- pleio.glm.test(obj, count.nonzero.coef = 0)
stat$stat
stat$pval

plseq <- pleio.glm.sequential(obj, pval.threshold=.6)
print(plseq)
